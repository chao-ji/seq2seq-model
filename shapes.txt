states
 BeamSearchDecoderState(cell_state=AttentionWrapperState(cell_state=(LSTMStateTuple(c=<tf.Tensor 'dynamic_seq2seq/decoder/decoder/while/Exit_5:0' shape=(?, 10, 512) dtype=float32>, h=<tf.Tensor 'dynamic_seq2seq/decoder/decoder/while/Exit_6:0' shape=(?, 10, 512) dtype=float32>), LSTMStateTuple(c=<tf.Tensor 'dynamic_seq2seq/decoder/decoder/while/Exit_7:0' shape=(?, 10, 512) dtype=float32>, h=<tf.Tensor 'dynamic_seq2seq/decoder/decoder/while/Exit_8:0' shape=(?, 10, 512) dtype=float32>)), attention=<tf.Tensor 'dynamic_seq2seq/decoder/decoder/while/Exit_9:0' shape=(?, 10, 512) dtype=float32>, time=<tf.Tensor 'dynamic_seq2seq/decoder/decoder/while/Exit_10:0' shape=() dtype=int32>, alignments=<tf.Tensor 'dynamic_seq2seq/decoder/decoder/while/Exit_11:0' shape=(?, 10, ?) dtype=float32>, alignment_history=<tf.Tensor 'dynamic_seq2seq/decoder/decoder/Reshape_3:0' shape=(?, ?, ?) dtype=float32>, attention_state=<tf.Tensor 'dynamic_seq2seq/decoder/decoder/while/Exit_13:0' shape=(?, 10, ?) dtype=float32>), log_probs=<tf.Tensor 'dynamic_seq2seq/decoder/decoder/while/Exit_14:0' shape=(?, 10) dtype=float32>, finished=<tf.Tensor 'dynamic_seq2seq/decoder/decoder/while/Exit_15:0' shape=(?, 10) dtype=bool>, lengths=<tf.Tensor 'dynamic_seq2seq/decoder/decoder/while/Exit_16:0' shape=(?, 10) dtype=int64>)

outputs
 FinalBeamSearchDecoderOutput(predicted_ids=<tf.Tensor 'dynamic_seq2seq/decoder/decoder/GatherTree:0' shape=(?, ?, 10) dtype=int32>, beam_search_decoder_output=BeamSearchDecoderOutput(scores=<tf.Tensor 'dynamic_seq2seq/decoder/decoder/TensorArrayStack/TensorArrayGatherV3:0' shape=(?, ?, 10) dtype=float32>, predicted_ids=<tf.Tensor 'dynamic_seq2seq/decoder/decoder/TensorArrayStack_1/TensorArrayGatherV3:0' shape=(?, ?, 10) dtype=int32>, parent_ids=<tf.Tensor 'dynamic_seq2seq/decoder/decoder/TensorArrayStack_2/TensorArrayGatherV3:0' shape=(?, ?, 10) dtype=int32>))




states(BeamSeachDecoderState)
  cell_state(AttentionWrapperState)
    cell_state(tuple of LSTMStateTuple)
      cell_state[0].c(Tensor): [batch_size, beam_width, num_units] (2, 10, 512)
      cell_state[0].h(Tensor): [batch_size, beam_width, num_units] (2, 10, 512)
      cell_state[1].c(Tensor): [batch_size, beam_width, num_units] (2, 10, 512)
      cell_state[1].h(Tensor): [batch_size, beam_width, num_units] (2, 10, 512)
    attention(Tensor): [batch_size, beam_width, num_units] (2, 10, 512)
    time(Tensor): scalar
    alignments(Tensor): [batch_size, beam_width, max_time_src] (2, 10, 30)
    alignment_history(Tensor): [max_time_tgt, batch_size * beam_width, max_time_src] (39, 20, 30)
    attention_state(Tensor): [batch_size, beam_width, max_time_src] (2, 10, 30) =============== attention(Tensor)
  log_probs(Tensor): [batch_size, beam_width] (2, 10)
  finished(Tensor): [batch_size, beam_width] (2, 10)
  lengths(Tensor): [batch_size, beam_width] (2, 10)
    
outputs(FinalBeamSearchDecoderOutput)
  predicted_ids(Tensor): [max_time_tgt, batch_size, beam_width] (39, 2, 10)
  beam_search_decoder_output(BeamSearchDecoderOutput):
    scores: [max_time_tgt, batch_size, beam_width] (39, 2, 10)
    last dimension in decreasing order: [-0.491572201 -1.2501657 -3.45362067 -4.95040131 -5.1889019 -5.22262669 -5.38507557 -5.51876068 -5.89146519 -6.01809311]
    predicted_ids: [max_time_tgt, batch_size, beam_width] (39, 2, 10)
    parent_ids: [max_time_tgt, batch_size, beam_width] (39, 2, 10)
